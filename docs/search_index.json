[
["index.html", "Basic Stats Preface: Motivation", " Basic Stats Bill Last Updated: 16 March, 2020 Preface: Motivation All the notes I have done here are about basic stats. While I have tried my best, probably there are still some typos and errors. Please feel free to let me know in case you find one. Thank you! "],
["logit-and-probit.html", "Chapter 1 Logit and Probit 1.1 Logit 1.2 Probit", " Chapter 1 Logit and Probit 1.1 Logit \\[f(x)=log(\\frac{p(y=1)}{1-p(y=1)})\\] The basic idea of logistic regression: \\[p(y=1)=\\frac{1}{1+e^{-(\\beta_0+\\beta_1x_1+...+\\beta_nx_n)}}=\\frac{e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}}{1+e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}}\\] Thus, \\(\\beta_0+\\beta_1x_1+...+\\beta_nx_n\\) can be from \\(-\\infty\\) to \\(+\\infty\\), and \\(p(y=1)\\) will be always within the range of \\((0,1)\\). f&lt;-function(x){exp(x)/(1+exp(x))} data&lt;-seq(-10,10,1) plot(data,f(data),type = &quot;b&quot;) We can also write the function into another format as follows: \\[log \\frac{p(y=1)}{1-p(y=1)}= \\beta_0+\\beta_1x_1+...+\\beta_nx_n\\] Thus, we know that the regression coeficients of \\(\\beta_i\\) actually change the “log-odds” of the event. Of course, note that the magnitude of \\(\\beta_i\\) is dependent upon the units of \\(x_i\\). The following is an example testing whether that home teams are more likely to win in NFL games. The results show that the odd of winning is the same for both home and away teams. mydata = read.csv(url(&#39;https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/games.csv&#39;)) mydata$result_new&lt;-ifelse(mydata$HomeScore&gt;mydata$VisitorScore,1,0) summary(mydata$result_new) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0000 0.0000 0.0000 0.4945 1.0000 1.0000 mylogit1 = glm(result_new~1, family=binomial, data=mydata) summary(mylogit1) ## ## Call: ## glm(formula = result_new ~ 1, family = binomial, data = mydata) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.168 -1.168 -1.168 1.187 1.187 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.02198 0.20967 -0.105 0.917 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 126.14 on 90 degrees of freedom ## Residual deviance: 126.14 on 90 degrees of freedom ## AIC: 128.14 ## ## Number of Fisher Scoring iterations: 3 1.2 Probit As noted above, logit \\(f(x)=log(\\frac{p(y=1)}{1-p(y=1)})\\) provides the resulting range of \\((0,1)\\). Another way to provide the same rage is through the cdf of normal distribution.The following R code is used to illusrate this process. data2&lt;-seq(-5,5,1) plot(data2,pnorm(data2),type = &quot;b&quot;) Thus, the cdf of normal distribution can be used to indicate the probability of \\(p(y=1)\\). \\[\\Phi(\\beta_0+\\beta_1x_1+...+\\beta_nx_n )= p(y=1)\\] Similar to logit model, we can also write the inverse function of the cdf to get the function that can be from \\(-\\infty\\) to \\(+\\infty\\). \\[\\beta_0+\\beta_1x_1+...+\\beta_nx_n =\\Phi^{-1}(p(y=1))\\] Thus, for example, if \\(X\\beta\\) = -2, based on \\(\\Phi(\\beta_0+\\beta_1x_1+...+\\beta_nx_n )= p(y=1)\\) we can get that the \\(p(y=1)=0.023\\). In contrast, if \\(X\\beta\\) = 3, the \\(p(y=1)=0.999\\). pnorm(-2) ## [1] 0.02275013 pnorm(3) ## [1] 0.9986501 Let’s assume that there is a latent variable called \\(Y^*\\) such that \\[Y^*=X\\beta+\\epsilon, \\epsilon \\sim N(0,\\sigma^2)\\] You could think of \\(Y^*\\) as a kind of “proxy” between \\(X\\beta+\\epsilon\\) and the observed \\(Y (1 or 0)\\). Thus, we can get the following. Note that, it does not have to be zero, and can be any constant. \\[ Y^*=\\begin{cases} 0 \\;\\;\\: if \\; y_i^* \\leq 0 \\\\ 1 \\;\\;\\: if \\; y_i^* &gt; 0 \\end{cases} \\] Thus, \\[y_i^* &gt; 0 \\Rightarrow \\beta^{&#39;}X_i + \\epsilon_i &gt;0 \\Rightarrow \\epsilon_i &gt; -\\beta^{&#39;}X_i\\] Thus, we can write it as follows. Note that \\(\\frac{ \\epsilon_i}{\\sigma} \\sim N(0,1)\\) \\[p(y=1|x_i)= p(y_i^* &gt;0|x_i)=p(\\epsilon_i &gt; -\\beta^{&#39;}X_i)= p(\\frac{ \\epsilon_i}{\\sigma}&gt;\\frac{-\\beta^{&#39;}X_i}{\\sigma})=\\Phi(\\frac{\\beta^{&#39;}X_i}{\\sigma}) \\] We thus can get: \\[p(y=0|x_i)=1-\\Phi(\\frac{\\beta^{&#39;}X_i}{\\sigma})\\] For \\(p(y=1|x_i)=\\Phi(\\frac{\\beta^{&#39;}X_i}{\\sigma})\\), we can not really estimate both \\(\\beta\\) and \\(\\sigma\\) as they are in a ratio. We can assume \\(\\sigma =1\\), then \\(\\epsilon \\sim N(0,1)\\). We know \\(y_i\\) and \\(x_i\\) since we observe them. Thus, we can write it as follows. \\[p(y=1|x_i)=\\Phi(\\beta^{&#39;}X_i)\\] "],
["normal-distribution.html", "Chapter 2 Normal distribution 2.1 Basics 2.2 Percentile 2.3 Confidence intervals", " Chapter 2 Normal distribution 2.1 Basics \\(\\mu\\) and \\(\\sigma\\) determine the center and spread of the distribution Normal The empirical rule holds for all normal distributions: 68% of the area under the curve lies between \\((\\mu-\\sigma,\\mu+\\sigma)\\). 95% of the area under the curve lies between \\((\\mu-2\\sigma,\\mu+2\\sigma)\\). 99.7% of the area under the curve lies between \\((\\mu-3\\sigma,\\mu+3\\sigma)\\). 2.2 Percentile A percentile is a measure used in statistics indicating the value below which a given percentage of observations in a group of observations falls. For example, the 20th percentile is the value (or score) below which 20% of the observations may be found. For normal distribution, -3 \\(\\sigma\\) is the 0.13th percentile (i.e., \\(\\frac{100-99.7}{2}=0.15\\)); -2 \\(\\sigma\\) is the 2.28th percentile ((i.e., \\(\\frac{100-95}{2}=2.50\\))); -1\\(\\sigma\\) is the 15.87th percentile (i.e., \\(\\frac{100-68}{2}=16\\)); 0 \\(\\sigma\\) is 50th percentile. +2 \\(\\sigma\\) is the 97.72nd percentile (i.e., \\(100-\\frac{100-95}{2}=100-2.5=97.50\\)); +3 \\(\\sigma\\) is the 99.87th percentile (i.e., \\(100-\\frac{100-99.70}{2}=100-0.15=99.85\\)). This is related to the 68-95-99.7 rule or the three-sigma rule. (Note that, it is related, not direct 68-95-99.7 rule, which is about symmetric situations. See the figure above) 2.3 Confidence intervals \\[\\bar{X} \\pm Z \\frac{\\sigma}{\\sqrt{n}}\\] where, \\(\\bar{X}\\) is the mean \\(Z\\) is the Z value (see the table below) \\(\\sigma\\) is the standard deviation \\(n\\) is the number of observations (We can see the connection between this formula and information shown in the Basics section.) \\[\\begin{bmatrix} confidence \\; level &amp; Z \\\\ 80 &amp; 1.282 \\\\ 85 &amp; 1.440 \\\\ 90 &amp; 1.645 \\\\ 95 &amp; 1.960 \\\\ 99 &amp; 2.576 \\\\ 99.5 &amp; 2.807 \\\\ 99.9 &amp; 3.291 \\end{bmatrix}\\] "],
["intro.html", "Chapter 3 MLE 3.1 Basic idea of MLE 3.2 Coin flip example, probit, and logit 3.3 Further on logit 3.4 References", " Chapter 3 MLE 3.1 Basic idea of MLE Suppose that we flip a coin, \\(y_i=0\\) for tails and \\(y_i=1\\) for heads. If we get \\(p\\) heads from \\(n\\) trials, we can get the proportion of heads is \\(p/n\\), which is the sample mean. If we do not do any further calculation, this is our best guess. Suppose that the true proablity is \\(\\rho\\), then we can get: \\[ \\mathbf{L}(y_i)=\\begin{cases} \\rho \\;\\;\\: y_i = 1 \\\\ 1-\\rho \\;\\;\\: y_i = 0 \\end{cases} \\] Thus, we can also write it as follows. \\[\\mathbf{L}(y_i) = \\rho^{y_i}(1-\\rho)^{1-y_i}\\] Thus, we can get: \\[\\prod \\mathbf{L}(y_i|\\rho)=\\rho^{\\sum y_i}(1-\\rho)^{\\sum(1-y_i)}\\] Further, we can get a log-transformed format. \\[log (\\prod \\mathbf{L}(y_i|\\rho))=\\sum y_i log \\rho + \\sum(1-y_i) log(1-\\rho)\\] To maximize the log-function above, we can calculate the derivative with respect to \\(\\rho\\). \\[\\frac{\\partial log (\\prod \\mathbf{L}(y_i|\\rho)) }{\\partial \\rho}=\\sum y_i \\frac{1}{\\rho}-\\sum(1-y_i) \\frac{1}{1-\\rho}\\] Set the derivative to zero and solve for \\(\\rho\\), we can get \\[\\sum y_i \\frac{1}{\\rho}-\\sum(1-y_i) \\frac{1}{1-\\rho}=0\\] \\[\\Rightarrow (1-\\rho)\\sum y_i - \\rho \\sum(1-y_i) =0\\] \\[\\Rightarrow \\sum y_i-\\rho\\sum y_i - n\\rho +\\rho\\sum y_i =0\\] \\[\\Rightarrow \\sum y_i - n\\rho =0\\] \\[\\Rightarrow \\rho = \\frac{\\sum y_i}{n}=\\frac{p}{n}\\] Thus, we can see that the \\(\\rho\\) maximizing the likelihood function is equal to the sample mean. 3.2 Coin flip example, probit, and logit In the example above, we are not really trying to estimate a lot of regression coefficients. What we are doing actually is to calculate the sample mean, or intercept in the regresion sense. What does it mean? Let’s use some data to explain it. Suppose that we flip a coin 20 times and observe 8 heads. We can use the R’s glm function to esimate the \\(\\rho\\). If the result is consistent with what we did above, we should observe that the \\(cdf\\) of the esimate of \\(\\beta_0\\) (i.e., intercept) should be equal to \\(8/20=0.4\\). coins&lt;-c(rep(1,times=8),rep(0,times=12)) table(coins) ## coins ## 0 1 ## 12 8 coins&lt;-as.data.frame(coins) 3.2.1 Probit probitresults &lt;- glm(coins ~ 1, family = binomial(link = &quot;probit&quot;), data = coins) probitresults ## ## Call: glm(formula = coins ~ 1, family = binomial(link = &quot;probit&quot;), ## data = coins) ## ## Coefficients: ## (Intercept) ## -0.2533 ## ## Degrees of Freedom: 19 Total (i.e. Null); 19 Residual ## Null Deviance: 26.92 ## Residual Deviance: 26.92 AIC: 28.92 pnorm(probitresults$coefficients) ## (Intercept) ## 0.4 As we can see the intercept is \\(-0.2533\\), and thus \\(\\Phi(-0.2533471)=0.4\\) 3.2.2 Logit We can also use logit link to calculate the intercept as well. Recall that \\[p(y=1)=\\frac{1}{1+e^{-(\\beta_0+\\beta_1x_1+...+\\beta_nx_n)}}=\\frac{e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}}{1+e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}}\\] Thus, \\[p(y=1)=\\frac{e^{\\beta_0}}{1+e^{\\beta_0}}\\] logitresults &lt;- glm(coins ~ 1, family = binomial(link = &quot;logit&quot;), data = coins) logitresults$coefficients ## (Intercept) ## -0.4054651 exp(logitresults$coefficients)/(1+exp(logitresults$coefficients)) ## (Intercept) ## 0.4 Note that, the defaul link for the binomial in the glm function in logit. 3.3 Further on logit The probablity of \\(y=1\\) is as follows: \\[p=p(y=1)=\\frac{1}{1+e^{-(\\beta_0+\\beta_1x_1+...+\\beta_nx_n)}}=\\frac{e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}}{1+e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}}\\] Thus, the likelihood function is as follows: \\[L=\\prod p^{y_i}(1-p)^{1-y_i}=\\prod (\\frac{1}{1+e^{-(\\beta_0+\\beta_1x_1+...+\\beta_nx_n)}})^{y_i}(\\frac{1}{1+e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}})^{1-y_i}\\] \\[=\\prod (1+e^{-(\\beta_0+\\beta_1x_1+...+\\beta_nx_n)})^{-y_i}(1+e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n})^{-(1-y_i)}\\] Thus, the log-likelihood is as follows: \\[logL=\\sum (-y_i \\cdot log(1+e^{-(\\beta_0+\\beta_1x_1+...+\\beta_nx_n)})-(1-y_i)\\cdot log(1+e^{\\beta_0+\\beta_1x_1+...+\\beta_nx_n}))\\] Typically, optimisers minimize a function, so we use negative log-likelihood as minimising that is equivalent to maximising the log-likelihood or the likelihood itself. #Source of R code: https://www.r-bloggers.com/logistic-regression/ mle.logreg = function(fmla, data) { # Define the negative log likelihood function logl &lt;- function(theta,x,y){ y &lt;- y x &lt;- as.matrix(x) beta &lt;- theta[1:ncol(x)] # Use the log-likelihood of the Bernouilli distribution, where p is # defined as the logistic transformation of a linear combination # of predictors, according to logit(p)=(x%*%beta) loglik &lt;- sum(-y*log(1 + exp(-(x%*%beta))) - (1-y)*log(1 + exp(x%*%beta))) return(-loglik) } # Prepare the data outcome = rownames(attr(terms(fmla),&quot;factors&quot;))[1] dfrTmp = model.frame(data) x = as.matrix(model.matrix(fmla, data=dfrTmp)) y = as.numeric(as.matrix(data[,match(outcome,colnames(data))])) # Define initial values for the parameters theta.start = rep(0,(dim(x)[2])) names(theta.start) = colnames(x) # Calculate the maximum likelihood mle = optim(theta.start,logl,x=x,y=y, method = &#39;BFGS&#39;, hessian=T) out = list(beta=mle$par,vcov=solve(mle$hessian),ll=2*mle$value) } mydata = read.csv(url(&#39;https://stats.idre.ucla.edu/stat/data/binary.csv&#39;)) mylogit1 = glm(admit~gre+gpa+as.factor(rank), family=binomial, data=mydata) mydata$rank = factor(mydata$rank) #Treat rank as a categorical variable fmla = as.formula(&quot;admit~gre+gpa+rank&quot;) #Create model formula mylogit2 = mle.logreg(fmla, mydata) #Estimate coefficients print(cbind(coef(mylogit1), mylogit2$beta)) ## [,1] [,2] ## (Intercept) -3.989979073 -3.772676422 ## gre 0.002264426 0.001375522 ## gpa 0.804037549 0.898201239 ## as.factor(rank)2 -0.675442928 -0.675543009 ## as.factor(rank)3 -1.340203916 -1.356554831 ## as.factor(rank)4 -1.551463677 -1.563396035 3.4 References http://www.columbia.edu/~so33/SusDev/Lecture_9.pdf "],
["score-gradient-and-jacobian.html", "Chapter 4 Score, Gradient and Jacobian 4.1 Score 4.2 Fisher scoring 4.3 Gradient and Jacobian 4.4 Hessian and Fisher Information", " Chapter 4 Score, Gradient and Jacobian 4.1 Score The score is the gradient (the vector of partial derivatives) of \\(log L(\\theta)\\), with respect to an m-dimensional parameter vector \\(\\theta\\). \\[S(\\theta) = \\frac{\\partial\\ell}{\\partial \\theta}\\] Typically, they use \\(\\nabla\\) to denote the partical derivative. \\[\\nabla \\ell\\] Such differentiation will generate a \\(m \\times 1\\) row vector, which indicates the sensitivity of the likelihood. Quote from Steffen Lauritzen’s slides: “Generally the solution to this equation must be calculated by iterative methods. One of the most common methods is the Newton–Raphson method and this is based on successive approximations to the solution, using Taylor’s theorem to approximate the equation.” For instance, using logit link, we can get the first derivative of log likelihood logistic regression as follows. We can not really find \\(\\beta\\) easily to make the equation to be 0. \\[\\begin{aligned} \\frac{\\partial \\ell} {\\partial \\beta} &amp;= \\sum_{i=1}^{n}x_i^T[y_i-\\frac{e^{\\beta^Tx_i}}{1+e^{\\beta^Tx_i}}] \\\\ &amp;=\\sum_{i=1}^{n} x_i^T[y_i-\\hat{y_i}] \\end{aligned}\\] 4.2 Fisher scoring [I will come back to this later.] https://www2.stat.duke.edu/courses/Fall00/sta216/handouts/diagnostics.pdf https://stats.stackexchange.com/questions/176351/implement-fisher-scoring-for-linear-regression 4.3 Gradient and Jacobian Remarks: This part discusses gradient in a more general sense. When \\(f(x)\\) is only in a single dimension space: \\(\\mathbb{R}^n \\rightarrow \\mathbb{R}\\) \\[\\nabla f(x)=[\\frac{\\partial f}{\\partial x_1},\\frac{\\partial f}{\\partial x_2},...,\\frac{\\partial f}{\\partial x_n}]\\] When \\(f(x)\\) is only in a m-dimension space (i.e., Jacobian): \\(\\mathbb{R}^n \\rightarrow \\mathbb{R^m}\\) \\[Jac(f)=\\begin{bmatrix} \\frac{\\partial f_1}{\\partial x_1} &amp; \\frac{\\partial f_1}{\\partial x_2} &amp; \\frac{\\partial f_1}{\\partial x_3} &amp; ... &amp; \\frac{\\partial f_1}{\\partial x_n}\\\\ \\frac{\\partial f_2}{\\partial x_1} &amp; \\frac{\\partial f_2}{\\partial x_2} &amp; \\frac{\\partial f_2}{\\partial x_3} &amp; ... &amp; \\frac{\\partial f_2}{\\partial x_n} \\\\ ...\\\\ \\frac{\\partial f_m}{\\partial x_1} &amp; \\frac{\\partial f_m}{\\partial x_2} &amp; \\frac{\\partial f_n}{\\partial x_3} &amp; ... &amp; \\frac{\\partial f_m}{\\partial x_n} \\end{bmatrix}\\] For instance, \\(\\mathbb{R}^n \\rightarrow \\mathbb{R}\\): \\[f(x,y)=x^2+2y\\] \\[\\nabla f(x,y)=[\\frac{\\partial f}{\\partial x},\\frac{\\partial f}{\\partial y}]=[2x,2]\\] \\(\\mathbb{R}^n \\rightarrow \\mathbb{R^m}\\) \\[f(x,y)=(x^2+2y,x^3)\\] \\[Jac(f)=\\begin{bmatrix} 2x &amp; 2\\\\ 2x^2 &amp; 0 \\end{bmatrix}\\] 4.4 Hessian and Fisher Information Hessian matrix or Hessian is a square matrix of second-order partial derivatives of a scalar-valued function, or scalar field. \\(\\mathbb{R}^n \\rightarrow \\mathbb{R}\\) \\[Hessian=\\nabla ^2(f) =\\begin{bmatrix} \\frac{\\partial^2 f}{\\partial x_1^2} &amp; \\frac{\\partial^2 f}{\\partial x_1 \\partial x_2} &amp; \\frac{\\partial^2 f}{\\partial x_1 \\partial x_3} &amp; ... &amp; \\frac{\\partial^2 f}{\\partial x_1 \\partial x_n}\\\\ \\frac{\\partial^2 f}{\\partial x_2 \\partial x_1} &amp; \\frac{\\partial^2 f}{\\partial x_2^2} &amp; \\frac{\\partial^2 f}{\\partial x_2 \\partial x_3} &amp; ... &amp; \\frac{\\partial^2 f}{\\partial x_2 \\partial x_n} \\\\ \\frac{\\partial^2 f}{\\partial x_3 \\partial x_1} &amp; \\frac{\\partial^2 f}{\\partial x_3 \\partial x_2} &amp; \\frac{\\partial^2 f}{\\partial x_3^2} &amp; ... &amp; \\frac{\\partial^2 f}{\\partial x_3 \\partial x_n} \\\\ ...\\\\ \\frac{\\partial^2 f}{\\partial x_n \\partial x_1} &amp; \\frac{\\partial^2 f}{\\partial x_n \\partial x_2} &amp; \\frac{\\partial^2 f}{\\partial x_n \\partial x_3} &amp; ... &amp; \\frac{\\partial^2 f}{\\partial x_n^2} \\end{bmatrix}\\] As a special case, in the context of logit: Suppose that the log likelihood function is \\(\\ell (\\theta)\\). \\(\\theta\\) is a \\(m\\) demension vector. \\[ \\theta = \\begin{bmatrix}\\theta_1 \\\\ \\theta_2 \\\\ \\theta_3 \\\\ \\theta_4 \\\\ ...\\\\ \\theta_m \\\\ \\end{bmatrix}\\] \\[Hessian=\\nabla ^2(\\ell) =\\begin{bmatrix} \\frac{\\partial^2 \\ell}{\\partial \\theta_1^2} &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_1 \\partial \\theta_2} &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_1 \\partial \\theta_3} &amp; ... &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_1 \\partial \\theta_m}\\\\ \\frac{\\partial^2 \\ell}{\\partial \\theta_2 \\partial \\theta_1} &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_2^2 } &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_1 \\partial \\theta_3} &amp; ... &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_1 \\partial \\theta_m} \\\\ \\frac{\\partial^2 \\ell}{\\partial \\theta_3 \\partial \\theta_1} &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_3 \\theta_2 } &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_3^2} &amp; ... &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_3 \\partial \\theta_m} \\\\ ...\\\\ \\frac{\\partial^2 \\ell}{\\partial \\theta_m \\partial \\theta_1} &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_m \\theta_2 } &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_m \\partial \\theta_3} &amp; ... &amp; \\frac{\\partial^2 \\ell}{\\partial \\theta_m \\partial \\theta_m} \\end{bmatrix}\\] “In statistics, the observed information, or observed Fisher information, is the negative of the second derivative (the Hessian matrix) of the”log-likelihood\" (the logarithm of the likelihood function). It is a sample-based version of the Fisher information.\" (Direct quote from Wikipedia.) Thus, the observed information matrix: \\[-Hessian=-\\nabla ^2(\\ell) \\] Expected (Fisher) information matrix: \\[E[-\\nabla ^2(\\ell)] \\] "],
["canonical-link-function.html", "Chapter 5 Canonical link function", " Chapter 5 Canonical link function Inspired by a Stack Exchange post, I created the following figure: \\[ \\frac{Paramter}{\\theta} \\longrightarrow \\gamma^{&#39;}(\\theta) = \\mu \\longrightarrow \\frac{Mean}{\\mu} \\longrightarrow g(\\mu) = \\eta \\longrightarrow \\frac{ Linear predictor}{\\eta} \\] For the case of \\(n\\) time Bernoulli (i.e., Binomial), its canonical link function is logit. Specifically, \\[ \\frac{Paramter}{\\theta=\\beta^Tx_i} \\longrightarrow \\gamma^{&#39;}(\\theta)= \\frac{e^{\\beta^Tx_i}}{1+e^{\\beta^Tx_i}}\\longrightarrow \\frac{Mean}{\\mu=\\frac{e^{\\beta^Tx_i}}{1+e^{\\beta^Tx_i}}}\\longrightarrow g(\\mu) = log \\frac{\\frac{e^{\\beta^Tx_i}}{1+e^{\\beta^Tx_i}}}{1-\\frac{e^{\\beta^Tx_i}}{1+e^{\\beta^Tx_i}}}\\longrightarrow \\frac{ Linear predictor}{\\eta = \\beta^Tx_i}\\] Thus, we can see that, \\[\\theta \\equiv \\eta \\] The link function \\(g(\\mu)\\) relates the linear predictor \\(\\eta = \\beta^Tx_i\\) to the mean \\(\\mu\\). Remarks: Parameter is \\(\\theta = \\beta ^T x_i\\) (Not \\(\\mu\\)!). \\(\\mu=p(y=1)=\\frac{e^{\\beta^Tx_i}}{1+e^{\\beta^Tx_i}}\\) (Not logit!). Link function (i.e., \\(g(\\mu)\\)) = logit = logarithm of odds = log \\(\\frac{Event - Happened }{Event - Not - Happened}\\). \\(g(\\mu) = log \\frac{\\mu}{1-\\mu}=\\beta^T x_i\\). Thus, link function = linear predictor = log odds! Quote from the Stack Exchange post “Newton Method and Fisher scoring for finding the ML estimator coincide, these links simplify the derivation of the MLE.” (Recall, we know that \\(\\mu\\) or \\(p(y=1)\\) is the mean function. Recall that, \\(n\\) trails of coin flips, and get \\(p\\) heads. Thus \\(\\mu = \\frac{p}{n}\\).) "],
["ordinary-least-squares-ols.html", "Chapter 6 Ordinary Least Squares (OLS) 6.1 Taylor series 6.2 References", " Chapter 6 Ordinary Least Squares (OLS) Suppose we have \\(n\\) observation, and \\(m\\) variables. \\[\\begin{bmatrix} x_{11} &amp; x_{12} &amp; x_{13} &amp; ... &amp; x_{1m}\\\\ x_{21} &amp; x_{22} &amp; x_{23} &amp; ... &amp; x_{2m} \\\\ ...\\\\ x_{n1} &amp; x_{n2} &amp; x_{n3} &amp; ... &amp; x_{nm} \\end{bmatrix}\\] Thus, we can write it as the following \\(n\\) equations. \\[y_1=\\beta_0+\\beta_1 x_{11}+\\beta_2 x_{12}+...+ \\beta_m x_{1m}\\] \\[y_2=\\beta_0+\\beta_1 x_{21}+\\beta_2 x_{22}+...+ \\beta_m x_{2m}\\] \\[y_3=\\beta_0+\\beta_1 x_{31}+\\beta_2 x_{32}+...+ \\beta_m x_{3m}\\] \\[...\\] \\[y_n=\\beta_0+\\beta_1 x_{n1}+\\beta_2 x_{n2}+...+ \\beta_m x_{nm}\\] We can combine all the \\(n\\) equations as the following one: \\[y_i=\\beta_0+\\beta_1 x_{i1}+\\beta_2 x_{i2}+...+ \\beta_m x_{im} (i \\in [1,n])\\] We can further rewrite it as a matrix format as follows. \\[y= X \\beta\\] Where, \\[y = \\begin{bmatrix}y_1 \\\\ y_2 \\\\ y_3 \\\\ y_4 \\\\ ...\\\\ y_n \\\\ \\end{bmatrix}\\] \\[X=\\begin{bmatrix} 1 &amp; x_{11} &amp; x_{12} &amp; x_{13} &amp; ... &amp; x_{1m}\\\\ 1 &amp; x_{21} &amp; x_{22} &amp; x_{23} &amp; ... &amp; x_{2m} \\\\ ...\\\\ 1 &amp; x_{n1} &amp; x_{n2} &amp; x_{n3} &amp; ... &amp; x_{nm} \\end{bmatrix}\\] \\[\\beta = \\begin{bmatrix}\\beta_0 \\\\ \\beta_1 \\\\ \\beta_2 \\\\ \\beta_3 \\\\ ...\\\\ \\beta_m \\\\ \\end{bmatrix}\\] Since later we need the inverse of \\(X\\), we need to make it into a square matrix. \\[X^Ty=X^TX \\hat{\\beta} \\Rightarrow \\hat{\\beta} = (X^TX)^{-1} X^Ty\\] We can use R to implement this calculation. As we can see, there is no need to do any iterations at all, but rather just pure matrix calculation. X&lt;-matrix(rnorm(1000),ncol=2) # we define a 2 column matrix, with 500 rows X&lt;-cbind(1,X) # add a 1 constant beta_true&lt;-c(2,1,2) # True regression coefficients beta_true&lt;-as.matrix(beta_true) y=X%*%beta_true+rnorm(500) transposed_X&lt;-t(X) beta_hat&lt;-solve(transposed_X%*%X)%*%transposed_X%*%y beta_hat ## [,1] ## [1,] 2.073459 ## [2,] 0.993279 ## [3,] 2.006511 Side Notes The function of as.matrix will automatically make c(2,1,2) become the dimension of \\(3 \\times 1\\), you do not need to transpose the \\(\\beta\\). 6.1 Taylor series \\[\\begin{aligned} f(x)|_{a} &amp;=f(a)+\\frac{f^{&#39;}(a)}{1!}(x-a)+\\frac{f^{&#39;}(a)}{2!}(x-a)^2+\\frac{f^{&#39;&#39;}(a)}{3!}(x-a)^{3}+...\\\\&amp;=\\sum_{n=0}^{\\infty} \\frac{f^{n}(a)}{n!}(x-a)^n \\end{aligned}\\] For example: \\[\\begin{aligned} e^x |_{a=0} &amp;= e^a+ \\frac{e^a}{1!}(x-a)+\\frac{e^a}{2!}(x-a)^2+...+\\frac{e^a}{n!}(x-a)^n \\\\ &amp;= 1+ \\frac{1}{1!}x+\\frac{1}{2!}x^2+...+\\frac{1}{n!}x^n \\end{aligned}\\] if \\(x=2\\) \\(e^2 = 7.389056\\) \\(e^2 \\approx 1+\\frac{1}{1!}x =1+\\frac{1}{1!}2=3\\) \\(e^2 \\approx 1+\\frac{1}{1!}x+\\frac{1}{2!}x^2 =1+\\frac{1}{1!}2 + \\frac{1}{2!}2 =5\\) … \\(e^2 \\approx 1+\\frac{1}{1!}x+\\frac{1}{2!}x^2 +\\frac{1}{3!}x^2+\\frac{1}{4!}x^2+\\frac{1}{5!}x^2=7.2666...\\) 6.2 References Steffen Lauritzen’s slides: http://www.stats.ox.ac.uk/~steffen/teaching/bs2HT9/scoring.pdf The Stack Exchange post: https://stats.stackexchange.com/questions/40876/what-is-the-difference-between-a-link-function-and-a-canonical-link-function Wilipedia for OLS https://en.wikipedia.org/wiki/Ordinary_least_squares Gradient and Jacobian https://math.stackexchange.com/questions/1519367/difference-between-gradient-and-jacobian https://www.youtube.com/watch?v=3xVMVT-2_t4 https://math.stackexchange.com/questions/661195/what-is-the-difference-between-the-gradient-and-the-directional-derivative Hessian https://en.wikipedia.org/wiki/Hessian_matrix Observed information https://en.wikipedia.org/wiki/Observed_information Fisher information https://people.missouristate.edu/songfengzheng/Teaching/MTH541/Lecture%20notes/Fisher_info.pdf Link function https://en.wikipedia.org/wiki/Generalized_linear_model#Link_function https://stats.stackexchange.com/questions/40876/what-is-the-difference-between-a-link-function-and-a-canonical-link-function "],
["cholesky-decomposition.html", "Chapter 7 Cholesky decomposition 7.1 Example 1 7.2 Example 2 7.3 Example 3", " Chapter 7 Cholesky decomposition 7.1 Example 1 Use Cholesky decomposition to generate 1,000 trivariate normal deviates \\(X_1, ..., x_{1000}\\) with mean \\(\\mu\\) = (−2, 4, 3) and covariance matrix \\[X=\\begin{bmatrix} 2 &amp; -1 &amp; 0.5 \\\\ -1 &amp; 4 &amp; 1 \\\\ 0.5 &amp; 1 &amp; 5 \\end{bmatrix}\\] Nsim = 10 means = c(-2,4,3) N_columns = 3 # Generating random standard normal distribution numbers Generated_numbers = matrix(rnorm(N_columns * Nsim), nrow = N_columns) # The provided covariance matrix cov_matrix = rbind(c(2, -1, 0.5), c(-1, 4, 1), c(0.5, 1, 5)) # Cholesky decomposition Cholesky_decom_results = chol(cov_matrix) # Data is transformed using the Cholesky decomposition adjusted_data = t(Generated_numbers) %*% Cholesky_decom_results Final_data = t(t(adjusted_data) + means) # calculating column means colMeans(Final_data) ## [1] -1.939328 4.400780 2.893931 # calculating column variances apply(Final_data,2,var) ## [1] 2.555828 2.572342 2.940991 # calculating covariance matrix cov(Final_data) ## [,1] [,2] [,3] ## [1,] 2.555828 -1.3495661 1.2660908 ## [2,] -1.349566 2.5723418 -0.8665656 ## [3,] 1.266091 -0.8665656 2.9409907 7.2 Example 2 AR(1) Covariance Matrix with Correlatiion Rho and Variance SigmaSq. Note that, there is only one individual or participant in this data simulation. n = 10; SigmaSq = 5; Rho = 0.8; V = matrix(rep(n*n,0),n,n); for (i in 1:n) { for (j in i:n) { V[i,j]=SigmaSq*Rho^(j-i) V[j,i]=V[i,j] } } set.seed(123) random_normal&lt;-rnorm(n,2,1) #chol(V) %*% random_normal #colSums (chol(V)) b2&lt;-t(as.matrix(random_normal))%*%chol(V) pi = exp(b2)/(1 + exp(b2)); y&lt;-ifelse(pi&gt;runif(1),1,0) y ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 1 1 1 1 1 1 1 1 1 # The code above basically completes the generating job! # The code below is to check b = b2[2:n] c = b2[1:(n-1)] cor(b,c) ## [1] 0.8967058 sd(as.vector(b2)) ## [1] 3.535119 # note that, you can not use var, as the mean is not zero, but rather it is 2 var(as.vector(b2)) ## [1] 12.49707 #Not sure why the means are not the same ? mean(as.vector(b2)) ## [1] 10.01925 mean(random_normal) ## [1] 2.074626 7.3 Example 3 The following code very similar to the code shown above. However, it had only one observation. To illustrate the situation where there are more than one individual (or, participant), I did the code below. n =25; #the number of time points m= 15; # the number of participants or individuals, whichever ways you would like to think SigmaSq = 5; Rho = 0.8; filling_numbers&lt;-rep(n*n,0) V = matrix(filling_numbers,n,n); for (i in 1:n) { for (j in i:n) { V[i,j]=SigmaSq*Rho^(j-i) V[j,i]=V[i,j] } } set.seed(2345) random_normal&lt;-matrix(rnorm(m*n),nrow = m) #chol(V) %*% random_normal #colSums (chol(V)) b2&lt;-random_normal%*%chol(V) pi = exp(b2)/(1 + exp(b2)); random_unfirom&lt;-matrix(runif(m*n),nrow = m) y&lt;-ifelse(pi&gt;random_unfirom,1,0) y ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] ## [1,] 0 0 0 0 0 0 1 1 1 1 1 0 1 ## [2,] 0 1 1 1 1 1 0 1 0 0 0 0 0 ## [3,] 1 0 0 0 0 1 0 1 0 1 1 0 0 ## [4,] 1 0 0 0 0 0 0 0 1 0 0 0 0 ## [5,] 0 0 0 0 1 0 0 0 0 0 0 0 1 ## [6,] 0 0 1 1 0 0 0 1 0 0 0 0 0 ## [7,] 0 0 0 0 0 1 0 0 1 0 0 0 1 ## [8,] 1 1 1 1 0 0 0 0 0 1 1 0 0 ## [9,] 1 1 1 1 0 1 1 1 0 1 0 0 0 ## [10,] 1 0 1 1 1 1 1 1 1 1 0 0 0 ## [11,] 1 1 1 1 1 1 1 1 1 0 1 0 0 ## [12,] 1 1 1 1 1 1 0 1 1 1 1 1 0 ## [13,] 0 1 0 0 0 0 0 0 1 1 1 1 0 ## [14,] 1 1 0 1 1 1 1 1 1 0 0 0 0 ## [15,] 1 1 0 1 1 1 1 0 0 1 0 0 1 ## [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] ## [1,] 1 1 1 1 0 1 0 0 1 0 0 ## [2,] 0 1 1 1 1 1 0 0 0 1 0 ## [3,] 0 1 0 0 1 1 1 1 0 0 1 ## [4,] 1 0 0 0 0 0 1 0 1 0 0 ## [5,] 0 0 1 1 1 0 1 1 1 0 1 ## [6,] 1 1 0 0 1 0 0 1 0 1 1 ## [7,] 0 0 0 0 0 1 0 0 1 0 0 ## [8,] 0 0 0 0 0 0 0 0 0 1 1 ## [9,] 0 1 1 1 0 0 1 0 0 0 0 ## [10,] 1 1 1 1 1 1 1 1 1 1 1 ## [11,] 0 0 0 1 0 0 0 0 1 1 1 ## [12,] 0 0 0 0 1 1 1 0 0 0 1 ## [13,] 0 1 0 0 0 1 0 1 1 1 1 ## [14,] 0 0 0 0 1 0 1 0 0 0 0 ## [15,] 0 0 0 0 0 0 1 0 1 0 0 ## [,25] ## [1,] 0 ## [2,] 1 ## [3,] 1 ## [4,] 0 ## [5,] 1 ## [6,] 1 ## [7,] 0 ## [8,] 1 ## [9,] 0 ## [10,] 1 ## [11,] 0 ## [12,] 0 ## [13,] 1 ## [14,] 0 ## [15,] 1 # The code above basically completes the generating job! The code below is to check # The following calcuates variance # calculate variance of each column mean(apply(b2, 2, var)) ## [1] 4.330903 # calculate variance of each row mean(apply(b2, 1, var)) ## [1] 3.568107 # The whole table var(as.vector(b2)) ## [1] 4.299165 # The following code calculates the correlation b = b2[,2:n] c = b2[,1:(n-1)] collected_cor&lt;-rep(0,m-1) #creating an empty vector to collect correlation. for (i in 1:(m-1)) {collected_cor[i]&lt;-cor(b[i,],c[i,])} collected_cor ## [1] 0.8473037 0.7065013 0.6376223 0.5481540 0.7851062 0.6576329 0.4844481 ## [8] 0.6950847 0.6731673 0.6409116 0.7966547 0.7184030 0.8001861 0.7913736 mean(collected_cor) ## [1] 0.6987535 mean(y) ## [1] 0.456 log(mean(y)/(1-mean(y))) ## [1] -0.1764564 # It will always get a value close to zero, since we set the mean to be zero when simulating the data "]
]
